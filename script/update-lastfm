#!/usr/bin/perl

use 5.024;
use warnings;
use utf8;

use Encode qw(decode encode);

BEGIN {use FindBin qw($Bin); require "$Bin/_init.pl"};

use FindBin qw($Bin);
use Mojo::Home;
use Mojo::DOM;
use URI::Escape qw(uri_escape uri_unescape uri_escape_utf8);
use Encode qw(encode decode);
use AE;
use AnyEvent::HTTP;
use Digest::MD5 qw(md5_hex);
use Sub::Daemon;
use utf8;


sub fetch_url {
    my $url = shift;
    my $res;
    
    my $cv = AE::cv;
    
    http_request 
        GET => $url, 
        headers => {
            "User-Agent" => "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:92.0) Gecko/20100101 Firefox/92.0",
      #      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
      #      'Accept-Language' => 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        },
        sub {
            $res = $_[0];
            $cv->send;
        };
    
    $cv->recv;
    
    
    return $res;
}


sub _open_xml {
    my $path = shift;
    
    my ($fi, $s);
    open $fi, $path;
    while (my $i = <$fi>) {
        $s .= $i;
    }
    close $fi;
    
    $s = Encode::decode('UTF-8', $s);
    
    return $s;
}

sub _process_feed {
    my $file = shift;
    my $proc = shift;
    
    state $cache = {};
    
    unless ($cache->{$file}) {
        $cache->{$file}->{m} = -M $file;
        my $s = _open_xml($file);
        return $cache->{$file}->{s} = [$proc->($s)];
    } else {
        if ($cache->{$file}->{m} != -M $file) {
            my $s = _open_xml($file);
            return $cache->{$file}->{s} = [$proc->($s)];
        } else {
            return $cache->{$file}->{s};
        }
    }
}

sub _decode_url {
    my $url = shift;
    
    my $i = uri_unescape($url);
    $i = decode('UTF-8', $i);
    $i =~ s/\+/ /g;
    
    $i =~ s/\&amp\;/\&/g;
    
    return $i;
}

sub _process_xml_main {
    my $mini = shift;
    my $xml  = shift;
    
    my $feed = Mojo::DOM->new($xml);
    $feed = $feed->find('.chartlist-row')->join("\n");
    
    $feed =~ s/[ \t]+/ /g;
    $feed =~ s/\n /\n/g;
    $feed =~ s/\n+/\n/g;
    $feed = [split /chartlist-row/, join "\n", $feed];
    
    
    my @feed;
    
    my $cnt = 0;
    for my $f (@$feed) {
        if ($f =~ / href\=\"\/music\/([^\/]+)\/[^\/]+\/([^\/"]+)\"/) {
            my $i = _decode_url("$1 - $2");
            my ($ts) = $f =~ /chartlist-timestamp.+?\<span[^\>]+\>\s*(.+?)\s*\<\/span\>/s;
            if ($ts) {
                $ts =~ s/\<[^\>]+\>//g;
                push @feed, [$i, $ts];
                last if $mini && $cnt >= 4;
                $cnt ++;
            }
            
        }
    }
    
    return @feed;
}


sub update {

    my $data = fetch_url('https://www.last.fm/user/trunaev');
    $data = decode('UTF-8', $data, Encode::FB_CROAK);

    my $dir = $Bin . '/../';

    if ($data) {
        my $fo;
        open $fo, '>' . $dir . '/db/lastfm.xml.tmp';
        binmode $fo, ':utf8';
        print $fo $data;
        close $fo;
        
        `mv $dir/db/lastfm.xml.tmp $dir/db/lastfm.xml`;
        
        my $f = _process_feed($dir . '/db/' . 'lastfm.xml', sub {_process_xml_main(1, shift)});
        $f = $f->[0]->[0];
        $f =~ s/^(.+?) -.+$/$1/;
        
        my $h = md5_hex(utf8::is_utf8($f) ? Encode::encode_utf8($f) : $f);

        my $url = 'https://www.last.fm/music/' . uri_escape_utf8($f);

        my $data = fetch_url($url);

        my ($img) = $data =~ /meta property=\"og:image\"\s+content=\"([^\"]+)\"/;

        my $img_f = $dir . 'public/i/covers/'.$h.'.jpg';
        
        unless (-s $img_f) {
            my $img_data = fetch_url($img);

            if ($img_data) {
                my $fo2;
                open $fo2, '>' . $img_f;
                print $fo2 $img_data;
                close $fo2;
            }
        }
    }

}


my $daemon = Sub::Daemon->new(
    logdir => $Bin . '/../log/',
    piddir => $Bin . '/../pid/',
);
 
$daemon->_daemonize();
 
$daemon->spawn(
        nproc => 1,
        code  => sub {
                my $is_running = 1;
                $SIG{$_} = sub { $is_running = 0 } for qw( TERM INT );
                while($is_running) {
                    update();
                    sleep 10;
                }
                 
                $daemon->stop();
        },
);


1;
